// lib/models/active_shift.dart
import 'package:flutter/material.dart' show debugPrint;

class ActiveShift {
  final int id;
  final int userId;
  final String username;
  final String slotTimeRange;
  final String position;
  final String zone;

  /// –•—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  final String? startTimeString;

  /// –•—Ä–∞–Ω–∏–º DateTime –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
  final DateTime? startTime;
  final bool isActive;
  final String selfie;

  ActiveShift({
    required this.id,
    required this.userId,
    required this.username,
    required this.slotTimeRange,
    required this.position,
    required this.zone,
    this.startTimeString,
    this.startTime,
    required this.isActive,
    required this.selfie,
  });

  factory ActiveShift.fromJson(Map<String, dynamic> json) {
    debugPrint('üîß ActiveShift.fromJson called with: $json');

    String? originalStartTimeStr;
    DateTime? parsedStartTime;

    if (json['start_time'] != null) {
      originalStartTimeStr = json['start_time'].toString();
      try {
        // –ü–∞—Ä—Å–∏–º –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ (–æ—Å—Ç–∞–µ—Ç—Å—è –≤ UTC –≤–Ω—É—Ç—Ä–∏ Dart)
        parsedStartTime = DateTime.parse(originalStartTimeStr);
        debugPrint(
            'üïí Parsed start_time for DateTime: $parsedStartTime (original: $originalStartTimeStr)');
      } catch (e) {
        debugPrint('‚ùå Error parsing start_time for DateTime: $e');
        parsedStartTime = null;
      }
    }

    return ActiveShift(
      id: json['id'] is int
          ? json['id'] as int
          : int.tryParse('${json['id']}') ?? 0,
      userId: json['user_id'] is int
          ? json['user_id'] as int
          : int.tryParse('${json['user_id']}') ?? 0,
      username: json['username']?.toString() ?? '',
      slotTimeRange: json['slot_time_range']?.toString() ?? '',
      position: json['position']?.toString() ?? '',
      zone: json['zone']?.toString() ?? '',
      selfie: json['selfie']?.toString() ?? '',
      startTimeString: originalStartTimeStr, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
      startTime: parsedStartTime, // –°–æ—Ö—Ä–∞–Ω—è–µ–º DateTime
      isActive: json['is_active'] is bool
          ? json['is_active'] as bool
          : (json['is_active']?.toString().toLowerCase() == 'true'),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'user_id': userId,
      'username': username,
      'slot_time_range': slotTimeRange,
      'position': position,
      'zone': zone,
      'start_time':
          startTime?.toIso8601String(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º DateTime –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      'is_active': isActive,
      'selfie': selfie,
    };
  }
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ HH:MM –∏–∑ —Å—Ç—Ä–æ–∫–∏ ISO 8601
/// –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "2025-08-14T09:46:53.633706464+05:00" –∏–∑–≤–ª–µ–∫–∞–µ—Ç "09:46"
String extractTimeFromIsoString(String? isoString) {
  if (isoString == null || isoString.isEmpty) return '...';

  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –ø–æ—Å–ª–µ 'T'
  final RegExp timeRegex = RegExp(r'T(\d{2}:\d{2})');
  final Match? match = timeRegex.firstMatch(isoString);

  if (match != null) {
    return match.group(1)!; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É (HH:MM)
  } else {
    // –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ '+', 'Z' –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
    // –≠—Ç–æ –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö
    try {
      final parts = isoString.split('T');
      if (parts.length > 1) {
        final timePartWithTz = parts[1];
        // –£–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—å —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º (–ø–æ—Å–ª–µ '+' –∏–ª–∏ 'Z')
        final timePart = timePartWithTz.split(RegExp(r'[+Z]'))[0];
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ HH:MM
        final timeComponents = timePart.split(':');
        if (timeComponents.length >= 2) {
          return '${timeComponents[0]}:${timeComponents[1]}';
        }
      }
    } catch (e) {
      debugPrint('Error in fallback time extraction: $e');
    }
    return '...';
  }
}
