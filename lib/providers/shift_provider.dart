// providers/shift_provider.dart
import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:image_picker/image_picker.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/shift_data.dart';
import '../services/api_service.dart';

class ShiftProvider with ChangeNotifier {
  final ApiService _apiService;
  final FlutterSecureStorage _storage;
  final SharedPreferences _prefs;

  String? _token;
  SlotState _slotState = SlotState.inactive;
  List<ShiftData> _shiftHistory = [];
  DateTime _selectedDate = DateTime.now();
  Timer? _timer;
  DateTime? _startTime; // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞

  ShiftProvider({
    required ApiService apiService,
    required FlutterSecureStorage storage,
    required SharedPreferences prefs,
    String? initialToken,
  })  : _apiService = apiService,
        _storage = storage,
        _prefs = prefs {
    _token = initialToken;
    _initializeShiftProvider();
  }

  Future<void> _initializeShiftProvider() async {
    print('‚úÖ ShiftProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

    if (_token == null) {
      _token = await _storage.read(key: 'jwt_token');
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º startTime –∏–∑ SharedPreferences
    final String? savedStartTime = _prefs.getString('active_slot_start_time');
    final String? storedState = await _storage.read(key: 'slot_state');

    if (storedState == 'active' && savedStartTime != null) {
      _slotState = SlotState.active;
      _startTime = DateTime.parse(savedStartTime);
      print(
          '‚úÖ ShiftProvider: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–∞–ª–æ: $_startTime');
    } else {
      _slotState = SlotState.inactive;
      _startTime = null;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    await loadShifts();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ —Å–ª–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
    if (_slotState == SlotState.active) {
      _startTimer();
    }
  }

  void _startTimer() {
    _timer?.cancel();
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      notifyListeners(); // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    });
  }

  Future<void> setToken(String token) async {
    _token = token;
    await _storage.write(key: 'jwt_token', value: token);
    print('‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
    await _initializeShiftProvider();
  }

  SlotState get slotState => _slotState;
  List<ShiftData> get shiftHistory => _shiftHistory;
  DateTime get selectedDate => _selectedDate;
  DateTime? get startTime => _startTime;

  String get formattedWorkTime {
    if (_startTime == null) return '0—á 0–º–∏–Ω';
    final duration = DateTime.now().difference(_startTime!);
    final h = duration.inHours;
    final m = (duration.inMinutes % 60);
    return '${h}—á ${m}–º–∏–Ω';
  }

  Future<void> loadShifts() async {
    if (_token == null) {
      print('‚ùå ShiftProvider: –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return;
    }
    try {
      print('‚úÖ –ó–∞–≥—Ä—É–∂–∞—é —Å–º–µ–Ω—ã...');
      _shiftHistory = await _apiService.getShifts(_token!);
      print('‚úÖ –°–º–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${_shiftHistory.length} –∑–∞–ø–∏—Å–µ–π');

      // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      final activeShift = _shiftHistory.lastWhereOrNull((s) => s.isActive);
      if (activeShift != null) {
        if (_slotState != SlotState.active) {
          _slotState = SlotState.active;
          _startTime = DateTime.parse(activeShift.startTime);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
          await _storage.write(key: 'slot_state', value: 'active');
          await _prefs.setString(
              'active_slot_start_time', _startTime!.toIso8601String());

          _startTimer();
          print('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞: $_startTime');
        }
      } else {
        // –ï—Å–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞, –Ω–æ —É –Ω–∞—Å –±—ã–ª ‚Äî —Å–±—Ä–æ—Å–∏–º
        if (_slotState == SlotState.active) {
          _slotState = SlotState.inactive;
          _startTime = null;
          await _storage.write(key: 'slot_state', value: 'inactive');
          await _prefs.remove('active_slot_start_time');
        }
      }

      notifyListeners();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ–Ω: $e');
    }
  }

  void selectDate(DateTime date) {
    _selectedDate = DateTime(date.year, date.month, date.day);
    notifyListeners();
  }

  Future<void> startSlot({
    required String slotTimeRange,
    required String position,
    required String zone,
    required XFile selfie,
  }) async {
    if (_slotState == SlotState.active) {
      print('‚ö†Ô∏è –°–ª–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –û—Ç–º–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.');
      return;
    }

    if (_token == null) {
      print('‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      throw Exception('–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    final File imageFile = File(selfie.path);
    try {
      await _apiService.startSlot(
        token: _token!,
        slotTimeRange: slotTimeRange,
        position: position,
        zone: zone,
        selfieImage: imageFile,
      );

      _startTime = DateTime.now();
      _slotState = SlotState.active;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      await _storage.write(key: 'slot_state', value: 'active');
      await _prefs.setString(
          'active_slot_start_time', _startTime!.toIso8601String());

      _startTimer();
      await loadShifts();
      notifyListeners();

      print('‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–ª–æ—Ç–∞: $e');
      rethrow;
    }
  }

  Future<void> endSlot() async {
    if (_token == null) throw Exception('–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    if (_slotState != SlotState.active) return;

    try {
      await _apiService.endSlot(_token!);

      _slotState = SlotState.inactive;
      _timer?.cancel();
      _startTime = null;

      await _storage.write(key: 'slot_state', value: 'inactive');
      await _prefs.remove('active_slot_start_time');

      await loadShifts();
      notifyListeners();

      print('‚úÖ –°–ª–æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞: $e');
      rethrow;
    }
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }
}

enum SlotState { inactive, active }

// ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
extension IterableFirstOrNull<T> on Iterable<T> {
  T? lastWhereOrNull(bool Function(T) test) {
    T? result;
    for (final item in this) {
      if (test(item)) result = item;
    }
    return result;
  }
}
