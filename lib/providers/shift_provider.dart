// lib/providers/shift_provider.dart
import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:image_picker/image_picker.dart'; // –î–ª—è XFile
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:shared_preferences/shared_preferences.dart';

// === –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏ ===
import 'package:timezone/timezone.dart' as tz;
// !!! –£–ë–†–ê–õ–ò: import 'package:timezone/data/latest.dart' as tz_data; !!!
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ main.dart

// –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π
import 'package:micro_mobility_app/models/active_shift.dart' as model;
import '../models/shift_data.dart';

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞
import '../services/api_service.dart';

class ShiftProvider with ChangeNotifier {
  final ApiService _apiService;
  final FlutterSecureStorage _storage;
  final SharedPreferences _prefs;

  String? _token;
  model.ActiveShift? _activeShift;
  List<ShiftData> _shiftHistory = [];
  // === –ò–ó–ú–ï–ù–ï–ù–û: –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ UTC+5 ===
  DateTime _selectedDate = _toAlmatyTime(DateTime.now());
  Timer? _timer;

  bool _isEndingSlot = false; // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
  bool _isStartingSlot = false; // üîí –ó–∞—â–∏—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

  // === –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ ===
  Map<String, dynamic>? _botStatsData;
  bool _isLoadingBotStats = false;
  // –ö—ç—à–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
  DateTime? _lastBotStatsFetchTime;

  // === –ò–ó–ú–ï–ù–ï–ù–û: –•—Ä–∞–Ω–∏–º username –≤–º–µ—Å—Ç–æ user_id ===
  String? _currentUsername;
  List<ShiftData> get activeShifts =>
      _shiftHistory.where((shift) => shift.isActive).toList();
  ShiftProvider({
    required ApiService apiService,
    required FlutterSecureStorage storage,
    required SharedPreferences prefs,
    String? initialToken,
  })  : _apiService = apiService,
        _storage = storage,
        _prefs = prefs {
    // !!! –£–ë–†–ê–õ–ò: tz_data.initializeTimeZones(); !!!
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ main.dart
    _token = initialToken;
    _initializeShiftProvider();
  }

  // === –î–û–ë–ê–í–õ–ï–ù–û: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ Almaty –≤—Ä–µ–º—è ===
  static DateTime _toAlmatyTime(DateTime dateTime) {
    // !!! –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ initializeTimeZones() —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –≤ main() !!!
    final almatyLocation = tz.getLocation('Asia/Almaty');
    // –°–æ–∑–¥–∞–µ–º TZDateTime –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ DateTime
    final tzDateTime = tz.TZDateTime.from(dateTime, almatyLocation);
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ DateTime, –Ω–æ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–π –∑–æ–Ω–µ
    return tzDateTime.toLocal();
  }

  // === –î–û–ë–ê–í–õ–ï–ù–û: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ Almaty ===
  static DateTime _nowInAlmaty() {
    final almatyLocation = tz.getLocation('Asia/Almaty');
    return tz.TZDateTime.now(almatyLocation).toLocal();
  }

  void _startTimer() {
    _timer?.cancel();
    if (_activeShift?.startTime != null) {
      _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
        notifyListeners(); // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
      });
    }
  }

  Future<void> setToken(String token) async {
    _token = token;
    await _storage.write(key: 'jwt_token', value: token);
    await _initializeShiftProvider();
  }

  model.ActiveShift? get activeShift => _activeShift;
  List<ShiftData> get shiftHistory => _shiftHistory;
  DateTime get selectedDate => _selectedDate;

  // === –î–û–ë–ê–í–õ–ï–ù–û: –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ ===
  Map<String, dynamic>? get botStatsData => _botStatsData;
  bool get isLoadingBotStats => _isLoadingBotStats;

  // === –ò–ó–ú–ï–ù–ï–ù–û: –ì–µ—Ç—Ç–µ—Ä –¥–ª—è username ===
  String? get currentUsername => _currentUsername;

  // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ –¥–≤–æ–π–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  String get formattedWorkTime {
    if (_activeShift?.startTime == null) return '0—á 0–º–∏–Ω 0—Å';

    // –ü—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º startTime –∫–∞–∫ "–ß–ß:–ú–ú:–°–°"
    final time = _activeShift!.startTime!;
    return '${time.hour}—á ${time.minute}–º–∏–Ω ${time.second}—Å';
  }

  Future<void> _initializeShiftProvider() async {
    if (_token == null) {
      _token = await _storage.read(key: 'jwt_token');
    }
    await loadShifts();
  }

  Future<void> loadShifts() async {
    if (_token == null) {
      _shiftHistory = [];
      _activeShift = null;
      _currentUsername = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º username
      _timer?.cancel();
      notifyListeners();
      return;
    }

    try {
      final dynamic shiftsData = await _apiService.getShifts(_token!);
      if (shiftsData is List) {
        _shiftHistory = shiftsData
            .whereType<Map<String, dynamic>>()
            .map((json) => ShiftData.fromJson(json))
            .toList();
      } else {
        _shiftHistory = [];
      }

      final activeShift = await _apiService.getActiveShift(_token!);
      _activeShift = activeShift;

      // === –ò–ó–ú–ï–ù–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º username ===
      if (activeShift != null) {
        _currentUsername = activeShift.username; // –ò—Å–ø–æ–ª—å–∑—É–µ–º username
        _startTimer();
      } else {
        _currentUsername = null;
        _timer?.cancel();
      }

      notifyListeners();
    } catch (e) {
      debugPrint('ShiftProvider.loadShifts error: $e');
      _shiftHistory = [];
      _activeShift = null;
      _currentUsername = null;
      _timer?.cancel();
      notifyListeners();
    }
  }

  // === –ò–ó–ú–ï–ù–ï–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º Almaty –≤—Ä–µ–º–µ–Ω–∏ ===
  void selectDate(DateTime date) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ Almaty –≤—Ä–µ–º—è
    _selectedDate = _toAlmatyTime(DateTime(date.year, date.month, date.day));
    notifyListeners();
  }

  /// –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã
  Future<void> startSlot({
    required String slotTimeRange,
    required String position,
    required String zone,
    required XFile selfie,
  }) async {
    if (_isStartingSlot) {
      debugPrint('ShiftProvider: Start slot already in progress.');
      return;
    }
    if (_activeShift != null) {
      debugPrint('ShiftProvider: Cannot start slot, already active.');
      return;
    }
    if (_token == null) {
      debugPrint('ShiftProvider: Cannot start slot, no token.');
      throw Exception('–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    final File imageFile = File(selfie.path);
    _isStartingSlot = true;
    notifyListeners(); // UI –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä

    try {
      await _apiService.startSlot(
        token: _token!,
        slotTimeRange: slotTimeRange,
        position: position,
        zone: zone,
        selfieImage: imageFile,
      );
      debugPrint('ShiftProvider: Slot started successfully.');

      // –°—Ä–∞–∑—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await loadShifts();
    } catch (e) {
      debugPrint('ShiftProvider.startSlot error: $e');
      rethrow;
    } finally {
      _isStartingSlot = false;
      notifyListeners();
    }
  }

  /// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã
  Future<void> endSlot() async {
    if (_isEndingSlot) {
      debugPrint('ShiftProvider: End slot already in progress.');
      return;
    }
    if (_token == null) {
      debugPrint('ShiftProvider: Cannot end slot, no token.');
      throw Exception('–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    if (_activeShift == null) {
      debugPrint('ShiftProvider: No active shift to end.');
      return;
    }

    _isEndingSlot = true;
    notifyListeners(); // –ü–æ–∫–∞–∂–µ–º –ª–æ–∞–¥–µ—Ä

    try {
      await _apiService.endSlot(_token!);
      debugPrint('‚úÖ Slot ended successfully.');

      // ‚úÖ –°—Ä–∞–∑—É —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É, username –∏ —Ç–∞–π–º–µ—Ä
      _activeShift = null;
      _currentUsername = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º username
      _timer?.cancel();

      // ‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
      unawaited(loadShifts());

      // ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º UI –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      notifyListeners();
    } catch (e) {
      debugPrint('‚ùå ShiftProvider.endSlot error: $e');

      // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await loadShifts();
      rethrow;
    } finally {
      _isEndingSlot = false;
      notifyListeners();
    }
  }

  // === –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ ===
  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Telegram-–±–æ—Ç–∞.
  /// –ö—ç—à–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
  Future<void> fetchBotStats() async {
    // –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å
    if (_isLoadingBotStats) {
      debugPrint('ShiftProvider: Bot stats fetch already in progress.');
      return;
    }

    // –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (_lastBotStatsFetchTime != null) {
      final now = DateTime.now();
      final difference = now.difference(_lastBotStatsFetchTime!);
      if (difference < const Duration(seconds: 30)) {
        debugPrint('ShiftProvider: Bot stats fetch skipped (cache hit).');
        // –î–∞–∂–µ –µ—Å–ª–∏ –∫—ç—à "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", –º—ã –º–æ–∂–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å UI, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã
        if (_botStatsData != null) {
          notifyListeners();
        }
        return;
      }
    }

    if (_token == null) {
      debugPrint('ShiftProvider: Cannot fetch bot stats, no token.');
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç
      _botStatsData = null;
      notifyListeners();
      return;
    }

    _isLoadingBotStats = true;
    notifyListeners();

    try {
      debugPrint('ShiftProvider: Fetching bot stats...');
      final stats = await _apiService.getScooterStatsForShift(_token!);
      _botStatsData = stats;
      _lastBotStatsFetchTime = DateTime.now();
      debugPrint('ShiftProvider: Bot stats fetched successfully.');
    } catch (e) {
      debugPrint('ShiftProvider.fetchBotStats error: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    } finally {
      _isLoadingBotStats = false;
      notifyListeners();
    }
  }

  // === –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à.
  Future<void> forceRefreshBotStats() async {
    _lastBotStatsFetchTime = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    await fetchBotStats();
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }
}
